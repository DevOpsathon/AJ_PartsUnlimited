name: MyShuttle CI-CD

on:
    push:
        branches: ['main']
    pull_request:
        branches: ['main']
    workflow_dispatch:
 

jobs:
    Build:
        runs-on: ubuntu-latest
        permissions:
          contents: read
          checks: write
          id-token: write
        outputs:
            set_date: ${{ steps.set_date.outputs.DATE }}
        steps:
            - name: Date variable
              id: set_date
              run: |
                  echo "DATE=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
                  
            - uses: actions/checkout@v3
            
            - name: Setup Java JDK 11
              uses: actions/setup-java@v3.12.0
              with:
                java-version: '11'
                distribution: temurin
                cache: maven

            - name: Build with Maven
              run: |
                  mvn package 

            - name: upload Build Artifacts
              uses: actions/upload-artifact@v3.1.2
              with:
                name: "myArtifact_${{ steps.set_date.outputs.DATE }}"
                path: |
                    ./target/*.war
                    *.sql

            - name: Publish Unit Test Results
              uses: mikepenz/action-junit-report@v4
              if: success() || failure()
              with:
                report_paths: './target/surefire-reports/TEST-*.xml'
            - name: Step Summary for JUnit Tests
              uses: actions/github-script@v7
              with:
                script: |
                  const fs = require('fs');
                  let summary = '';
                  const testResults = fs.readdirSync('target/surefire-reports').filter(fn => fn.startsWith('TEST-') && fn.endsWith('.xml'));
                  for (const fn of testResults) {
                    const content = fs.readFileSync(`target/surefire-reports/${fn}`, 'utf8');
                    // parse content and create summary
                  }
                  console.log(summary);

    code_scanning:
        name: Analyze
        needs: 'Build'
        runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
        timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
        permissions:
            actions: read
            contents: read
            security-events: write
    
        strategy:
            fail-fast: false
            matrix:
                language: [ 'java' ]
    
        steps:
        - name: Checkout repository
          uses: actions/checkout@v3
    
        - name: Initialize CodeQL
          uses: github/codeql-action/init@v2
          with:
            languages: ${{ matrix.language }}
           
        - name: Autobuild
          uses: github/codeql-action/autobuild@v2
    
        - name: Perform CodeQL Analysis
          uses: github/codeql-action/analyze@v2
          with:
            category: "/language:${{matrix.language}}"

    terraform:
        name: 'Terraform'
        needs: ['Build', 'code_scanning']
        runs-on: ubuntu-latest
        # outputs:
        #     PUBLISH_PROFILE: ${{ steps.AZURE_WEBAPP_PUBLISH_PROFILE.outputs.AZ_PUBLISH_PROFILE }} 

        defaults:
          run:
            shell: bash
            working-directory: ${{ vars.tf_actions_working_dir }}

        permissions:
            pull-requests: write

        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    
        steps:
        - name: Checkout
          uses: actions/checkout@v4.1.1
    
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
    
        - name: Terraform Init
          id: init
          run: terraform init

        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
    
        # Run a terraform plan for pull requests only
        - name: Terraform Plan
          id: plan
          if: github.event_name == 'pull_request'
          run: terraform plan -no-color 2>/dev/null
          continue-on-error: true

        - uses: actions/github-script@v7
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>
        
              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`
        
              </details>
        
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
              <details><summary>Show Plan</summary>
        
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
        
              </details>
        
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ vars.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
    
        - name: Terraform Apply
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve

        # login to azure cli
        # - name: Azure login
        #   uses: azure/login@v1
        #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        #   with:
        #     creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
  
        # - name: Azure CLI script
        #   uses: azure/CLI@v1
        #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        #   id: AZURE_WEBAPP_PUBLISH_PROFILE
        #   with:
        #     azcliversion: latest
        #     inlineScript: |
        #       echo "AZ_PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles -g 'myshuttle-rg' -n 'myshuttle-webapp' --xml)" >> $GITHUB_OUTPUT
    
    deployToAzure:
      name: üöÄ Deploy to Prod
      runs-on: ubuntu-latest 
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      environment: 
       name: deploy
       url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
      needs: ['Build', 'terraform']

      steps:
        - name: Download artifact from build job
          uses: actions/download-artifact@v3
          with:
            name: "myArtifact_${{ needs.Build.outputs.set_date }}"

        - name: Azure CLI script
          uses: azure/CLI@v1
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          id: AZURE_WEBAPP_PUBLISH_PROFILE
          with:
            azcliversion: latest
            inlineScript: |
              echo "PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles -g 'myshuttle-rg' -n 'myshuttle-webapp' --xml)" >> $GITHUB_OUTPUT

        # - name: Azure login
        #   uses: azure/login@v1
        #   with:
        #     creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

        - name: Azure WebApp
          uses: Azure/webapps-deploy@v3
          id: deploy-to-webapp
          with:
            app-name: myshuttlejava-webapp
            package: ./target/
            publish-profile: ${{ steps.AZURE_WEBAPP_PUBLISH_PROFILE.outputs.PUBLISH_PROFILE }}
            
        - uses: azure/mysql@v1.3.0
          with:
            server-name: ${{ secrets.SERVER_NAME }}
            username: ${{ secrets.SQL_USERNAME }}
            password: ${{ secrets.SQL_PASSWORD }}
            # This is optional, you want to connect directly
            database: alm
            sql-file: './CreateMYSQLDB.sql'
